#include<iostream>
using namespace std;


/*
Compute the permutation and combination where n = 5 and r = 3 ?



   nPr(5, 3) = 5! / (5 - 3)! = 5 * 4 * 3 * 2 * 1 / (2 * 1) = 60
   nCr(5, 3) = 5! / (3! * (5 - 3)!) = 5 * 4 * 3 * 2 * 1 / ((3 * 2 * 1) * (2 * 1)) = 10


*/
unsigned long long nCr(int n, int r) {
	if (r > n)
		return 0;
	r = max(r, n - r); //nCr(n,r) = nCr(n,n-r)
	unsigned long long ans = 1, div = 1, i = r + 1;
	while (i <= n) {
		ans *= i;
		i++;
		ans /= div;
		div++;
	}
	return ans;
}

unsigned long long nPr(int n, int r) {
	if (r > n)
		return 0;
	unsigned long long p = 1, i = n - r + 1;
	while (i <= n)
		p *= i++;
	return p;
}

long long gcd(long long a, long long b) {
	if (a < b)
		swap(a, b);
	while (a != 0 && b != 0) {
		long long r = a % b;
		a = b;
		b = r;
	}
	return a;
}

long long lcm(long long a, long long b) {
	return a / gcd(a, b) * b;
}

void prime_factors(int n) {
	for (int i = 2; i <= n; i++) {
		if (n % i == 0) {
			int cnt = 0;
			while (n % i == 0) {
				n /= i;
				cnt++;
			}
			cout << i << ' ' << cnt << endl;
		}
	}
}

void prime_factors_sqrt(int n) {
	for (int i = 2; i * i <= n; i++) {
		if (n % i == 0) {
			int cnt = 0;
			while (n % i == 0) {
				n /= i;
				cnt++;
			}
			cout << i << ' ' << cnt << endl;
		}
	}
	if (n > 1) {
		cout << n << ' ' << 1 << endl;
	}
}

int main() {
	cout << pow(4, 3) << ' ' << sqrt(16) << ' ' << cbrt(64) << endl;//64 4 4
}

/*
 What is the sum of this sequence: {4, 10, 16, 22, 28, 34, 40} ?

 sum=( (firstNumber + lastNumber)/2 ) * numberOfNumber =((4 + 40)/2) * 7 = 154





 What is the angle of 60 degrees in radians?

 60 degrees = 60 * PI / 180 = PI / 3 radians



is not a triangle.
This is because the sum of the two smallest sides should be greater than the other side.


*/
